// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/mkman/validators"
)

type FakeValidator struct {
	ValidateStub        func(vt validators.ValidationTarget) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		vt validators.ValidationTarget
	}
	validateReturns struct {
		result1 error
	}
	ComposableNameStub        func() string
	composableNameMutex       sync.RWMutex
	composableNameArgsForCall []struct{}
	composableNameReturns     struct {
		result1 string
	}
}

func (fake *FakeValidator) Validate(vt validators.ValidationTarget) error {
	fake.validateMutex.Lock()
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		vt validators.ValidationTarget
	}{vt})
	fake.validateMutex.Unlock()
	if fake.ValidateStub != nil {
		return fake.ValidateStub(vt)
	} else {
		return fake.validateReturns.result1
	}
}

func (fake *FakeValidator) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *FakeValidator) ValidateArgsForCall(i int) validators.ValidationTarget {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.validateArgsForCall[i].vt
}

func (fake *FakeValidator) ValidateReturns(result1 error) {
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeValidator) ComposableName() string {
	fake.composableNameMutex.Lock()
	fake.composableNameArgsForCall = append(fake.composableNameArgsForCall, struct{}{})
	fake.composableNameMutex.Unlock()
	if fake.ComposableNameStub != nil {
		return fake.ComposableNameStub()
	} else {
		return fake.composableNameReturns.result1
	}
}

func (fake *FakeValidator) ComposableNameCallCount() int {
	fake.composableNameMutex.RLock()
	defer fake.composableNameMutex.RUnlock()
	return len(fake.composableNameArgsForCall)
}

func (fake *FakeValidator) ComposableNameReturns(result1 string) {
	fake.ComposableNameStub = nil
	fake.composableNameReturns = struct {
		result1 string
	}{result1}
}

var _ validators.Validator = new(FakeValidator)
